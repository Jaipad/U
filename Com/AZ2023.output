Terminals unused in grammar

    id
    cost


State 21 conflicts: 4 shift/reduce
State 37 conflicts: 4 shift/reduce
State 38 conflicts: 4 shift/reduce
State 39 conflicts: 4 shift/reduce
State 40 conflicts: 4 shift/reduce
State 44 conflicts: 4 shift/reduce


Grammar

    0 $accept: programa $end

    1 programa: INICIO inst FIN

    2 inst: inst inst
    3     | inst_leer
    4     | inst_escribir
    5     | inst_si
    6     | inst_asig

    7 inst_leer: LEER PAR_IZQ IDENTIFICADOR PAR_DER

    8 inst_escribir: ESCRIBIR PAR_IZQ texto PAR_DER
    9              | ESCRIBIR PAR_IZQ IDENTIFICADOR PAR_DER

   10 inst_si: SI cond ENTONCES inst

   11 inst_asig: IDENTIFICADOR IGUAL exp

   12 exp: ENTERO
   13    | IDENTIFICADOR
   14    | exp SUMA exp
   15    | exp RESTA exp
   16    | exp POR exp
   17    | exp DIVIDIDO exp

   18 cond: exp MENOR exp
   19     | exp MAYOR exp
   20     | exp IGUAL_COMP exp


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INICIO (258) 1
    FIN (259) 1
    LEER (260) 7
    ESCRIBIR (261) 8 9
    SI (262) 10
    ENTONCES (263) 10
    IDENTIFICADOR <string_val> (264) 7 9 11 13
    ENTERO <entero> (265) 12
    IGUAL (266) 11
    SUMA (267) 14
    RESTA (268) 15
    POR (269) 16
    DIVIDIDO (270) 17
    MENOR (271) 18
    MAYOR (272) 19
    IGUAL_COMP (273) 20
    PAR_DER (274) 7 8 9
    PAR_IZQ (275) 7 8 9
    id (276)
    cost (277)
    texto <string_val> (278) 8


Nonterminals, with rules where they appear

    $accept (24)
        on left: 0
    programa (25)
        on left: 1
        on right: 0
    inst <tipo_inst> (26)
        on left: 2 3 4 5 6
        on right: 1 2 10
    inst_leer <tipo_inst> (27)
        on left: 7
        on right: 3
    inst_escribir <tipo_inst> (28)
        on left: 8 9
        on right: 4
    inst_si <tipo_inst> (29)
        on left: 10
        on right: 5
    inst_asig <tipo_inst> (30)
        on left: 11
        on right: 6
    exp <entero> (31)
        on left: 12 13 14 15 16 17
        on right: 11 14 15 16 17 18 19 20
    cond <entero> (32)
        on left: 18 19 20
        on right: 10


State 0

    0 $accept: • programa $end

    INICIO  shift, and go to state 1

    programa  go to state 2


State 1

    1 programa: INICIO • inst FIN

    LEER           shift, and go to state 3
    ESCRIBIR       shift, and go to state 4
    SI             shift, and go to state 5
    IDENTIFICADOR  shift, and go to state 6

    inst           go to state 7
    inst_leer      go to state 8
    inst_escribir  go to state 9
    inst_si        go to state 10
    inst_asig      go to state 11


State 2

    0 $accept: programa • $end

    $end  shift, and go to state 12


State 3

    7 inst_leer: LEER • PAR_IZQ IDENTIFICADOR PAR_DER

    PAR_IZQ  shift, and go to state 13


State 4

    8 inst_escribir: ESCRIBIR • PAR_IZQ texto PAR_DER
    9              | ESCRIBIR • PAR_IZQ IDENTIFICADOR PAR_DER

    PAR_IZQ  shift, and go to state 14


State 5

   10 inst_si: SI • cond ENTONCES inst

    IDENTIFICADOR  shift, and go to state 15
    ENTERO         shift, and go to state 16

    exp   go to state 17
    cond  go to state 18


State 6

   11 inst_asig: IDENTIFICADOR • IGUAL exp

    IGUAL  shift, and go to state 19


State 7

    1 programa: INICIO inst • FIN
    2 inst: inst • inst

    FIN            shift, and go to state 20
    LEER           shift, and go to state 3
    ESCRIBIR       shift, and go to state 4
    SI             shift, and go to state 5
    IDENTIFICADOR  shift, and go to state 6

    inst           go to state 21
    inst_leer      go to state 8
    inst_escribir  go to state 9
    inst_si        go to state 10
    inst_asig      go to state 11


State 8

    3 inst: inst_leer •

    $default  reduce using rule 3 (inst)


State 9

    4 inst: inst_escribir •

    $default  reduce using rule 4 (inst)


State 10

    5 inst: inst_si •

    $default  reduce using rule 5 (inst)


State 11

    6 inst: inst_asig •

    $default  reduce using rule 6 (inst)


State 12

    0 $accept: programa $end •

    $default  accept


State 13

    7 inst_leer: LEER PAR_IZQ • IDENTIFICADOR PAR_DER

    IDENTIFICADOR  shift, and go to state 22


State 14

    8 inst_escribir: ESCRIBIR PAR_IZQ • texto PAR_DER
    9              | ESCRIBIR PAR_IZQ • IDENTIFICADOR PAR_DER

    IDENTIFICADOR  shift, and go to state 23
    texto          shift, and go to state 24


State 15

   13 exp: IDENTIFICADOR •

    $default  reduce using rule 13 (exp)


State 16

   12 exp: ENTERO •

    $default  reduce using rule 12 (exp)


State 17

   14 exp: exp • SUMA exp
   15    | exp • RESTA exp
   16    | exp • POR exp
   17    | exp • DIVIDIDO exp
   18 cond: exp • MENOR exp
   19     | exp • MAYOR exp
   20     | exp • IGUAL_COMP exp

    SUMA        shift, and go to state 25
    RESTA       shift, and go to state 26
    POR         shift, and go to state 27
    DIVIDIDO    shift, and go to state 28
    MENOR       shift, and go to state 29
    MAYOR       shift, and go to state 30
    IGUAL_COMP  shift, and go to state 31


State 18

   10 inst_si: SI cond • ENTONCES inst

    ENTONCES  shift, and go to state 32


State 19

   11 inst_asig: IDENTIFICADOR IGUAL • exp

    IDENTIFICADOR  shift, and go to state 15
    ENTERO         shift, and go to state 16

    exp  go to state 33


State 20

    1 programa: INICIO inst FIN •

    $default  reduce using rule 1 (programa)


State 21

    2 inst: inst • inst
    2     | inst inst •

    LEER           shift, and go to state 3
    ESCRIBIR       shift, and go to state 4
    SI             shift, and go to state 5
    IDENTIFICADOR  shift, and go to state 6

    LEER           [reduce using rule 2 (inst)]
    ESCRIBIR       [reduce using rule 2 (inst)]
    SI             [reduce using rule 2 (inst)]
    IDENTIFICADOR  [reduce using rule 2 (inst)]
    $default       reduce using rule 2 (inst)

    inst           go to state 21
    inst_leer      go to state 8
    inst_escribir  go to state 9
    inst_si        go to state 10
    inst_asig      go to state 11


State 22

    7 inst_leer: LEER PAR_IZQ IDENTIFICADOR • PAR_DER

    PAR_DER  shift, and go to state 34


State 23

    9 inst_escribir: ESCRIBIR PAR_IZQ IDENTIFICADOR • PAR_DER

    PAR_DER  shift, and go to state 35


State 24

    8 inst_escribir: ESCRIBIR PAR_IZQ texto • PAR_DER

    PAR_DER  shift, and go to state 36


State 25

   14 exp: exp SUMA • exp

    IDENTIFICADOR  shift, and go to state 15
    ENTERO         shift, and go to state 16

    exp  go to state 37


State 26

   15 exp: exp RESTA • exp

    IDENTIFICADOR  shift, and go to state 15
    ENTERO         shift, and go to state 16

    exp  go to state 38


State 27

   16 exp: exp POR • exp

    IDENTIFICADOR  shift, and go to state 15
    ENTERO         shift, and go to state 16

    exp  go to state 39


State 28

   17 exp: exp DIVIDIDO • exp

    IDENTIFICADOR  shift, and go to state 15
    ENTERO         shift, and go to state 16

    exp  go to state 40


State 29

   18 cond: exp MENOR • exp

    IDENTIFICADOR  shift, and go to state 15
    ENTERO         shift, and go to state 16

    exp  go to state 41


State 30

   19 cond: exp MAYOR • exp

    IDENTIFICADOR  shift, and go to state 15
    ENTERO         shift, and go to state 16

    exp  go to state 42


State 31

   20 cond: exp IGUAL_COMP • exp

    IDENTIFICADOR  shift, and go to state 15
    ENTERO         shift, and go to state 16

    exp  go to state 43


State 32

   10 inst_si: SI cond ENTONCES • inst

    LEER           shift, and go to state 3
    ESCRIBIR       shift, and go to state 4
    SI             shift, and go to state 5
    IDENTIFICADOR  shift, and go to state 6

    inst           go to state 44
    inst_leer      go to state 8
    inst_escribir  go to state 9
    inst_si        go to state 10
    inst_asig      go to state 11


State 33

   11 inst_asig: IDENTIFICADOR IGUAL exp •
   14 exp: exp • SUMA exp
   15    | exp • RESTA exp
   16    | exp • POR exp
   17    | exp • DIVIDIDO exp

    SUMA      shift, and go to state 25
    RESTA     shift, and go to state 26
    POR       shift, and go to state 27
    DIVIDIDO  shift, and go to state 28

    $default  reduce using rule 11 (inst_asig)


State 34

    7 inst_leer: LEER PAR_IZQ IDENTIFICADOR PAR_DER •

    $default  reduce using rule 7 (inst_leer)


State 35

    9 inst_escribir: ESCRIBIR PAR_IZQ IDENTIFICADOR PAR_DER •

    $default  reduce using rule 9 (inst_escribir)


State 36

    8 inst_escribir: ESCRIBIR PAR_IZQ texto PAR_DER •

    $default  reduce using rule 8 (inst_escribir)


State 37

   14 exp: exp • SUMA exp
   14    | exp SUMA exp •
   15    | exp • RESTA exp
   16    | exp • POR exp
   17    | exp • DIVIDIDO exp

    SUMA      shift, and go to state 25
    RESTA     shift, and go to state 26
    POR       shift, and go to state 27
    DIVIDIDO  shift, and go to state 28

    SUMA      [reduce using rule 14 (exp)]
    RESTA     [reduce using rule 14 (exp)]
    POR       [reduce using rule 14 (exp)]
    DIVIDIDO  [reduce using rule 14 (exp)]
    $default  reduce using rule 14 (exp)


State 38

   14 exp: exp • SUMA exp
   15    | exp • RESTA exp
   15    | exp RESTA exp •
   16    | exp • POR exp
   17    | exp • DIVIDIDO exp

    SUMA      shift, and go to state 25
    RESTA     shift, and go to state 26
    POR       shift, and go to state 27
    DIVIDIDO  shift, and go to state 28

    SUMA      [reduce using rule 15 (exp)]
    RESTA     [reduce using rule 15 (exp)]
    POR       [reduce using rule 15 (exp)]
    DIVIDIDO  [reduce using rule 15 (exp)]
    $default  reduce using rule 15 (exp)


State 39

   14 exp: exp • SUMA exp
   15    | exp • RESTA exp
   16    | exp • POR exp
   16    | exp POR exp •
   17    | exp • DIVIDIDO exp

    SUMA      shift, and go to state 25
    RESTA     shift, and go to state 26
    POR       shift, and go to state 27
    DIVIDIDO  shift, and go to state 28

    SUMA      [reduce using rule 16 (exp)]
    RESTA     [reduce using rule 16 (exp)]
    POR       [reduce using rule 16 (exp)]
    DIVIDIDO  [reduce using rule 16 (exp)]
    $default  reduce using rule 16 (exp)


State 40

   14 exp: exp • SUMA exp
   15    | exp • RESTA exp
   16    | exp • POR exp
   17    | exp • DIVIDIDO exp
   17    | exp DIVIDIDO exp •

    SUMA      shift, and go to state 25
    RESTA     shift, and go to state 26
    POR       shift, and go to state 27
    DIVIDIDO  shift, and go to state 28

    SUMA      [reduce using rule 17 (exp)]
    RESTA     [reduce using rule 17 (exp)]
    POR       [reduce using rule 17 (exp)]
    DIVIDIDO  [reduce using rule 17 (exp)]
    $default  reduce using rule 17 (exp)


State 41

   14 exp: exp • SUMA exp
   15    | exp • RESTA exp
   16    | exp • POR exp
   17    | exp • DIVIDIDO exp
   18 cond: exp MENOR exp •

    SUMA      shift, and go to state 25
    RESTA     shift, and go to state 26
    POR       shift, and go to state 27
    DIVIDIDO  shift, and go to state 28

    $default  reduce using rule 18 (cond)


State 42

   14 exp: exp • SUMA exp
   15    | exp • RESTA exp
   16    | exp • POR exp
   17    | exp • DIVIDIDO exp
   19 cond: exp MAYOR exp •

    SUMA      shift, and go to state 25
    RESTA     shift, and go to state 26
    POR       shift, and go to state 27
    DIVIDIDO  shift, and go to state 28

    $default  reduce using rule 19 (cond)


State 43

   14 exp: exp • SUMA exp
   15    | exp • RESTA exp
   16    | exp • POR exp
   17    | exp • DIVIDIDO exp
   20 cond: exp IGUAL_COMP exp •

    SUMA      shift, and go to state 25
    RESTA     shift, and go to state 26
    POR       shift, and go to state 27
    DIVIDIDO  shift, and go to state 28

    $default  reduce using rule 20 (cond)


State 44

    2 inst: inst • inst
   10 inst_si: SI cond ENTONCES inst •

    LEER           shift, and go to state 3
    ESCRIBIR       shift, and go to state 4
    SI             shift, and go to state 5
    IDENTIFICADOR  shift, and go to state 6

    LEER           [reduce using rule 10 (inst_si)]
    ESCRIBIR       [reduce using rule 10 (inst_si)]
    SI             [reduce using rule 10 (inst_si)]
    IDENTIFICADOR  [reduce using rule 10 (inst_si)]
    $default       reduce using rule 10 (inst_si)

    inst           go to state 21
    inst_leer      go to state 8
    inst_escribir  go to state 9
    inst_si        go to state 10
    inst_asig      go to state 11
